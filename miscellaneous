builder.Services.AddCors(options =>
{
    options.AddDefaultPolicy(builder =>
    {
        builder.AllowAnyOrigin()
               .AllowAnyMethod()
               .AllowAnyHeader()
               .AllowCredentials();
    });
});

var configuration = builder.Configuration;

builder.Services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)
    .AddJwtBearer(options =>
    {
        options.TokenValidationParameters = new TokenValidationParameters
        {
            ValidateIssuer = true,
            ValidateLifetime = true,
            ValidateIssuerSigningKey = true,
            ValidIssuer = configuration["Jwt:Issuer"],
            IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(configuration["Jwt:Key"]))
        };
    });



    .............................
System.ArgumentOutOfRangeException
  HResult=0x80131502
  Message=IDX10653: The encryption algorithm 'HS256' requires a key size of at least '128' bits. Key '[PII of type 'Microsoft.IdentityModel.Tokens.SymmetricSecurityKey' is hidden. For more details, see https://aka.ms/IdentityModel/PII.]', is of size: '64'. Arg_ParamName_Name
  Source=Microsoft.IdentityModel.Tokens
  StackTrace:
   at Microsoft.IdentityModel.Tokens.SymmetricSignatureProvider..ctor(SecurityKey key, String algorithm, Boolean willCreateSignatures)
   at Microsoft.IdentityModel.Tokens.CryptoProviderFactory.CreateSignatureProvider(SecurityKey key, String algorithm, Boolean willCreateSignatures, Boolean cacheProvider)
   at Microsoft.IdentityModel.Tokens.CryptoProviderFactory.CreateForSigning(SecurityKey key, String algorithm, Boolean cacheProvider)
   at Microsoft.IdentityModel.Tokens.CryptoProviderFactory.CreateForSigning(SecurityKey key, String algorithm)
   at Microsoft.IdentityModel.JsonWebTokens.JwtTokenUtilities.CreateEncodedSignature(String input, SigningCredentials signingCredentials)
   at System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.WriteToken(SecurityToken token)
   at backend.services.JwtTokenService.GenerateToken(EmployeeMaster employee) in D:\WF-DotNet-Team5\backend\Services\JwtTokenService.cs:line 41
   at backend.Controllers.EmployeeController.Login(EmployeeLoginModel e) in D:\WF-DotNet-Team5\backend\Controllers\EmployeeController.cs:line 68
   at Microsoft.AspNetCore.Mvc.Infrastructure.ActionMethodExecutor.SyncActionResultExecutor.Execute(ActionContext actionContext, IActionResultTypeMapper mapper, ObjectMethodExecutor executor, Object controller, Object[] arguments)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.InvokeActionMethodAsync()
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.InvokeNextActionFilterAsync()
------------------------
Scaffold command
Scaffold-DbContext "Server=WINDOWS-BVQNF6J;Database=testjwt;Trusted_Connection=True;Encrypt=False" Microsoft.EntityFrameworkCore.SqlServer -o Models -Force


-----------------------
scl updated schema

create database loans;
use loans;

select * from employee_master;

--all item details
--Item category is same as loan type in loan_card_master
create table Item_master(
Item_id varchar(100) primary key,
Item_description varchar(200) NOT NULL,
Issue_status char(1) NOT NULL,
Item_make varchar(50) NOT NULL,
Item_category varchar(50) NOT NULL,
Item_valuation int NOT NULL check (Item_valuation between 0 and 999999)
);

--all employee details
create table Employee_master(
Employee_id varchar(100) primary key,
Password_hash varchar(100) NOT NULL,
Salt varchar(32) NOT NULL,
Employee_name varchar(50) NOT NULL,
Designation varchar(25) NOT NULL,
Department varchar(50) NOT NULL,
Gender char(1) NOT NULL,
Date_of_birth DATE,
Date_of_joining DATE default getdate()
);

--stores the loan card categories
create table Loan_card_master(
Loan_id varchar(6) primary key,
Loan_type varchar(15) not null,
Duration_in_years int not null check (Duration_in_years between 0 and 99)
);

--stores ALL the requests of an employee
create table Employee_request_details(
Request_id varchar(6) primary key,
Employee_id varchar(100) references Employee_master(Employee_id),
Item_id varchar(100) references Item_master(Item_id),
Request_date DATE default getdate(),
Request_status varchar(50) default 'Pending Approval',
Return_date DATE,
);

--stores the approved loans of an employee
--have added card id field since there is no unique key
create table Employee_loan_card_details(
Card_id varchar(100) primary key,
Employee_id varchar(100) references Employee_master(Employee_id),
Loan_id varchar(100) references Loan_card_master(Loan_id),
Card_issue_date DATE default getdate()
);

