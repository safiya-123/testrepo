builder.Services.AddCors(options =>
{
    options.AddDefaultPolicy(builder =>
    {
        builder.AllowAnyOrigin()
               .AllowAnyMethod()
               .AllowAnyHeader()
               .AllowCredentials();
    });
});

var configuration = builder.Configuration;

builder.Services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)
    .AddJwtBearer(options =>
    {
        options.TokenValidationParameters = new TokenValidationParameters
        {
            ValidateIssuer = true,
            ValidateLifetime = true,
            ValidateIssuerSigningKey = true,
            ValidIssuer = configuration["Jwt:Issuer"],
            IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(configuration["Jwt:Key"]))
        };
    });



    .............................
System.ArgumentOutOfRangeException
  HResult=0x80131502
  Message=IDX10653: The encryption algorithm 'HS256' requires a key size of at least '128' bits. Key '[PII of type 'Microsoft.IdentityModel.Tokens.SymmetricSecurityKey' is hidden. For more details, see https://aka.ms/IdentityModel/PII.]', is of size: '64'. Arg_ParamName_Name
  Source=Microsoft.IdentityModel.Tokens
  StackTrace:
   at Microsoft.IdentityModel.Tokens.SymmetricSignatureProvider..ctor(SecurityKey key, String algorithm, Boolean willCreateSignatures)
   at Microsoft.IdentityModel.Tokens.CryptoProviderFactory.CreateSignatureProvider(SecurityKey key, String algorithm, Boolean willCreateSignatures, Boolean cacheProvider)
   at Microsoft.IdentityModel.Tokens.CryptoProviderFactory.CreateForSigning(SecurityKey key, String algorithm, Boolean cacheProvider)
   at Microsoft.IdentityModel.Tokens.CryptoProviderFactory.CreateForSigning(SecurityKey key, String algorithm)
   at Microsoft.IdentityModel.JsonWebTokens.JwtTokenUtilities.CreateEncodedSignature(String input, SigningCredentials signingCredentials)
   at System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.WriteToken(SecurityToken token)
   at backend.services.JwtTokenService.GenerateToken(EmployeeMaster employee) in D:\WF-DotNet-Team5\backend\Services\JwtTokenService.cs:line 41
   at backend.Controllers.EmployeeController.Login(EmployeeLoginModel e) in D:\WF-DotNet-Team5\backend\Controllers\EmployeeController.cs:line 68
   at Microsoft.AspNetCore.Mvc.Infrastructure.ActionMethodExecutor.SyncActionResultExecutor.Execute(ActionContext actionContext, IActionResultTypeMapper mapper, ObjectMethodExecutor executor, Object controller, Object[] arguments)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.InvokeActionMethodAsync()
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.InvokeNextActionFilterAsync()
------------------------
Scaffold command
Scaffold-DbContext "Server=WINDOWS-BVQNF6J;Database=testjwt;Trusted_Connection=True;Encrypt=False" Microsoft.EntityFrameworkCore.SqlServer -o Models -Force


-----------------------
scl updated schema

create database loans;
use loans;

select * from employee_master;

--all item details
--Item category is same as loan type in loan_card_master
create table Item_master(
Item_id varchar(100) primary key,
Item_description varchar(200) NOT NULL,
Issue_status char(1) NOT NULL,
Item_make varchar(50) NOT NULL,
Item_category varchar(50) NOT NULL,
Item_valuation int NOT NULL check (Item_valuation between 0 and 999999)
);

--all employee details
create table Employee_master(
Employee_id varchar(100) primary key,
Password_hash varchar(100) NOT NULL,
Salt varchar(32) NOT NULL,
Employee_name varchar(50) NOT NULL,
Designation varchar(25) NOT NULL,
Department varchar(50) NOT NULL,
Gender char(1) NOT NULL,
Date_of_birth DATE,
Date_of_joining DATE default getdate()
);

--stores the loan card categories
create table Loan_card_master(
Loan_id varchar(6) primary key,
Loan_type varchar(15) not null,
Duration_in_years int not null check (Duration_in_years between 0 and 99)
);

--stores ALL the requests of an employee
create table Employee_request_details(
Request_id varchar(6) primary key,
Employee_id varchar(100) references Employee_master(Employee_id),
Item_id varchar(100) references Item_master(Item_id),
Request_date DATE default getdate(),
Request_status varchar(50) default 'Pending Approval',
Return_date DATE,
);

--stores the approved loans of an employee
--have added card id field since there is no unique key
create table Employee_loan_card_details(
Card_id varchar(100) primary key,
Employee_id varchar(100) references Employee_master(Employee_id),
Loan_id varchar(100) references Loan_card_master(Loan_id),
Card_issue_date DATE default getdate()
);
----------------
System.InvalidOperationException: Unable to resolve service for type 'backend.Services.Interfaces.IEmployeeService' while attempting to activate 'backend.Controllers.EmployeeController'.
   at Microsoft.Extensions.DependencyInjection.ActivatorUtilities.GetService(IServiceProvider sp, Type type, Type requiredBy, Boolean isDefaultParameterRequired)
   at lambda_method10(Closure, IServiceProvider, Object[])
   at Microsoft.AspNetCore.Mvc.Controllers.ControllerFactoryProvider.<>c__DisplayClass6_0.<CreateControllerFactory>g__CreateController|0(ControllerContext controllerContext)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.InvokeInnerFilterAsync()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeFilterPipelineAsync>g__Awaited|20_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Awaited|17_0(ResourceInvoker invoker, Task task, IDisposable scope)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Awaited|17_0(ResourceInvoker invoker, Task task, IDisposable scope)
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)
   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)
   at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(HttpContext context)
   at Microsoft.AspNetCore.Authentication.AuthenticationMiddleware.Invoke(HttpContext context)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddlewareImpl.Invoke(HttpContext context)


....................................
using backend.Models;
using backend.Models.Response;
using backend.Repository;
using backend.Repository.Interfaces;
using Microsoft.EntityFrameworkCore;
using Moq;
using NUnit.Framework;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace TestbackendAPIs.Repository
{
    public class TestEmployeeRepo
    {
        private Mock<LoansContext> _mockDb;
        private IEmployeeRepo _employeeRepo;
        private Mock<DbSet<EmployeeMaster>> _mockDbSet;
        private IQueryable<EmployeeMaster> employeeData;

        [SetUp]
        public void Setup()
        {
            _mockDb = new Mock<LoansContext>();
            _mockDbSet = new Mock<DbSet<EmployeeMaster>>();
            employeeData = new List<EmployeeMaster>() {
            new EmployeeMaster
            {
                EmployeeId = "EMP-1234",
                PasswordHash = "1234",
                Salt = "123",
                EmployeeName = "Test",
                Designation = "admin",
                Department = "IT",
                Gender = "F",
                DateOfBirth = DateTime.Now.Date,
                DateOfJoining = DateTime.Now.Date
            },

            new EmployeeMaster
            {
                EmployeeId = "EMP-1235",
                PasswordHash = "1234",
                Salt = "123",
                EmployeeName = "Test1",
                Designation = "employee",
                Department = "IT",
                Gender = "F",
                DateOfBirth = DateTime.Now.Date,
                DateOfJoining = DateTime.Now.Date
            }
            }.AsQueryable();

            _mockDbSet.As<IQueryable<EmployeeMaster>>().Setup(m => m.Provider).Returns(employeeData.Provider);
            _mockDbSet.As<IQueryable<EmployeeMaster>>().Setup(m => m.Expression).Returns(employeeData.Expression);
            _mockDbSet.As<IQueryable<EmployeeMaster>>().Setup(m => m.ElementType).Returns(employeeData.ElementType);
            _mockDbSet.As<IQueryable<EmployeeMaster>>().Setup(m => m.GetEnumerator()).Returns(employeeData.GetEnumerator());

            _mockDb.Setup(m => m.EmployeeMasters).Returns(_mockDbSet.Object);

            _employeeRepo = new EmployeeRepo(_mockDb.Object);
        }

        [Test]
        public void TestAddEmployee()
        {
            var addEmployee = new EmployeeMaster
            {
                EmployeeId = "EMP-1234",
                PasswordHash = "1234",
                Salt = "123",
                EmployeeName = "Test",
                Designation = "admin",
                Department = "IT",
                Gender = "F",
                DateOfBirth = DateTime.Now.Date,
                DateOfJoining = DateTime.Now.Date
            };
            var result = _employeeRepo.AddEmployee(addEmployee);

            Assert.IsTrue(result);
            
        }
        [Test]
        public void TestGetAllEmployees()
        {
            var result = _employeeRepo.GetAllEmployees();

            Assert.IsNotNull(result);
            Assert.IsInstanceOf<List<EmployeeResponse>>(result);
            Assert.AreEqual(2, result.Count);
        }
    }
}

..............
using backend.Models;
using backend.Models.Response;
using backend.Models.Request;
using backend.Repository.Interfaces;
using Microsoft.AspNetCore.Mvc;
using backend.Services;
using System.Security.Cryptography;

namespace backend.Repository
{
    public class EmployeeRepo : IEmployeeRepo
    {
        private readonly LoansContext _db;

        public EmployeeRepo(LoansContext db)
        {
            _db = db;
        }

        public bool AddEmployee(EmployeeMaster employee)
        {
            try
            {
                _db.Set<EmployeeMaster>().Add(employee);
                _db.SaveChanges();
                //_db.EmployeeMasters.Add(employee);
                // _db.SaveChangesAsync();
                return true;
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
                return false;
            }
        }

        public List<EmployeeResponse> GetAllEmployees()
        {
            var response = _db.EmployeeMasters
                .Select(employee => new EmployeeResponse
                {
                    EmployeeId = employee.EmployeeId,
                    EmployeeName = employee.EmployeeName,
                    Designation = employee.Designation,
                    Department = employee.Department,
                    Gender = employee.Gender,
                    DateOfBirth = employee.DateOfBirth,
                    DateOfJoining = employee.DateOfJoining
                })
                .ToList();
            return response;
        }

        public EmployeeMaster? GetEmployeeById(string employeeId)
        {
            var employee = _db.EmployeeMasters.FirstOrDefault(employee => employee.EmployeeId == employeeId);
            return employee;
        }

        public bool UpdateEmployee(UpdateEmployeeRequest employee)
        {
            var existingEmployee = _db.EmployeeMasters.FirstOrDefault(empl => empl.EmployeeId == employee.EmployeeId);
            Console.WriteLine("employee is " + employee);
            if (existingEmployee != null) 
            {
                existingEmployee.EmployeeName = employee.EmployeeName ?? existingEmployee.EmployeeName;
                existingEmployee.Designation = employee.Designation ?? existingEmployee.Designation;
                existingEmployee.Department = employee.Department ?? existingEmployee.Department;
                existingEmployee.Gender = employee.Gender ?? existingEmployee.Gender;
                existingEmployee.DateOfBirth = employee.DateOfBirth ?? existingEmployee.DateOfBirth;
                existingEmployee.DateOfJoining = employee.DateOfJoining ?? existingEmployee.DateOfJoining;

                /*
                 * Functionality for admin only
                 * if (employee.Password!=null)
                {
                    (existingEmployee.PasswordHash, existingEmployee.Salt) = PasswordHelper.HashPassword(employee.Password);
                }*/
                try
                {
                    _db.Entry(existingEmployee).State = Microsoft.EntityFrameworkCore.EntityState.Modified;
                    _db.SaveChangesAsync();
                    return true;
                }
                catch(Exception e)
                {
                    return false;
                }
            }

            return false;
        }

        public EmployeeResponse? DeleteEmployee(string employeeId)
        {
            EmployeeMaster? employee =  _db.EmployeeMasters.Find(employeeId);
            if (employee == null)
            {
                return null;
            }
            else
            {
                _db.EmployeeMasters.Remove(employee);
                _db.SaveChanges();
                var deletedEmployee = new EmployeeResponse
                {
                    EmployeeId = employee.EmployeeId,
                    EmployeeName = employee.EmployeeName,
                    Designation = employee.Designation,
                    Department = employee.Department,
                    Gender = employee.Gender,
                    DateOfBirth = employee.DateOfBirth,
                    DateOfJoining = employee.DateOfJoining
                };
                return deletedEmployee;
            }
        }
    }
}

